安装
	yum -y update
	yum install docker -y
	
启动
	systemctl start docker.service
	systemctl status docker.service

生命周期管理
	systemctl stop docker.service
	systemctl start docker.service
	systemctl restart docker.service
	systemctl status docker.service
	
安装常用工具
	yum install iproute ftp bind-utils net-tools wget -y
	iproute 用来执行 ip address 查看本机地址
	ftp 用来测试ftp 服务器
	bind_utils 用来运行 nslookup
	net-tools 用来执行 netstate
	wget 既是执行 wget的
	
配置dns
	nslookup www.baidu.com
	vi /etc/resolv.conf 
	# Generated by NetworkManager
	search www.tendawifi.com
	nameserver 119.29.29.29
	nameserver 182.254.116.116
	
配置镜像加速器
	sudo mkdir -p /etc/docker
	sudo tee /etc/docker/daemon.json 
	{
	  "registry-mirrors": ["https://registry.docker-cn.com"]
	}
	sudo systemctl daemon-reload
	sudo systemctl restart docker
	tail /etc/docker/daemon.json
	
拉取镜像
	docker pull how2j/tmall
	
运行镜像
	docker run -dit --privileged -p21:21 -p80:80 -p8080:8080 -p30000-30010:30000-30010 --name how2jtmall how2j/tmall:latest /usr/sbin/init
	dit 是 -d -i -t 的缩写。 -d ，表示 detach，即在后台运行。 -i 表示提供交互接口，这样才可以通过 docker 和 跑起来的操作系统交互。 -t 表示提供一个 tty (伪终端)，与 -i 配合就可以通过 ssh 工具连接到 这个容器里面去了
	--privileged 启动容器的时候，把权限带进去。 这样才可以在容器里进行完整的操作
	-p21:21 第一个21，表示在CentOS 上开放21端口。 第二个21 表示在容器里开放21端口。 这样当访问CentOS 的21端口的时候，就会间接地访问到容器里了
	-p80:80 和 21一个道理
	-p8080:8080 和21 一个道理，在本例里，访问的地址是 http://192.168.84.128:8080/tmall/， 这个 192.168.84.128 是CentOS 的ip地址，8080是 CentOS 的端口，但是通过-p8080:8080 这么一映射，就访问到容器里的8080端口上的 tomcat了
	-p30000-30010 和21也是一个道理，这个是ftp用来传输数据的
	--name how2jtmall 给容器取了个名字，叫做 how2jtmall，方便后续管理
	how2j/tmall:latest how2j/tmall就是镜像的名称， latest是版本号，即最新版本
	/usr/sbin/init: 表示启动后运行的程序，即通过这个命令做初始化

检查端口	
	netstat -anp|grep 8080
	
访问地址
	http://106.14.148.111:8080/tmall
	
进入容器
	docker exec -it how2jtmall /bin/bash
	exit
	
仓库： 别人做好的现成的镜像，都放在仓库里
镜像： 自己要用哪个镜像，就先拉到本地来。镜像就相当于还没激活的容器。
容器： 容器就是跑起来的镜像，就是一个完整的工作环境
	
镜像管理：
	docker search java
	docker images
	docker rmi $(docker images -q)
	提交
		docker login
		docker tag docker.io/tomcat:8.0 docker.io/mytomcat:8.0
		docker push how2j/tmall:latest
		
	
容器管理：
	docker run ..
	docker exec -it id /bin/bash
	docker commit  容器名
	生命周期
		pause\unpause\stop\start
	docker ps -a
	docker ps
	docker inspect id
	docker rm $(docker ps -aq)
	
网络恢复
	vi /etc/sysctl.conf
	或者
	vi /usr/lib/sysctl.d/00-system.conf
	添加如下代码：
	net.ipv4.ip_forward=1
	重启network服务
	systemctl restart network
	查看是否修改成功
	sysctl net.ipv4.ip_forward
	如果返回为“net.ipv4.ip_forward = 1”则表示成功了
	
FTP 
	安装
		yum install vsftpd -y
	查看服务启动状态
		systemctl start vsftpd.service
		systemctl status vsftpd.service
		systemctl stop vsftpd.service
		
部署Java环境
	docker run -itv /root/software/:/mnt.software/ f1cb7c7d58b7 /bin/bash
	
	
docker info
docker version
docker --help

### Docker容器

启动Docker后台服务

​	systemctl start docker

删除Docker

​	yum remove docker-ce

​	rm -rf /var/lib/docker

docker ps	查看运行容器

docker run [options] image --name  

运行交互式容器ubuntu

​	docker run -i -t ubuntu:15.10 /bin/bash 

​	进入ubuntu镜像

​	-t  指定伪终端

​	-i  允许对容器内的标准输入进行交互

	退出
	exit
	Ctrl+P+Q  docker attach id/ docker exec -t id ll /temp(隔山打牛)



启动容器

​	创建一个以进程方式运行的容器

​	docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"

​	查看容器内的标准输出

​	docker logs  id....

​	停止容器

​	docker stop id....

​	docker stop amazing_cori



运行web应用

​	python flask

​	docker pull training/webapp	载入镜像

​	docker run -d -P training/webapp python app.py

​	-d:容器后台运行

​	-P:将容器内部使用的网络端口映射到我们使用的主机上

​	-p:指定端口号 8080:5000

​	docker port id...

​		查看端口号

```
PORTS
0.0.0.0:32769->5000/tcp
ocker 开放了 5000 端口（默认 Python Flask 端口）映射到主机端口 32769 上。
可访问宿主机 ip+port(32769)
```

​	查看日志

​		docker logs id..

​	查看web容器进程

​		docker top id...

​	检查web应用程序

​		docker inspect



​	停止docker容器

​		docker stop id...

​	重启

​		docker start id..

​	移除

​		docker remove id..



##### Docker镜像

​	查看

​		docker images [-qa]

​	获取

​		docker pull repository:tag	

​	查找

​		docker search  -s 30
	
	删除
		docker  rmi -f id/name
		docker rmi -f name1 name2
		docker rmi -f $(docker images -qa)

​	创建镜像

​		1，更新

​			docker run -t -i ubuntu:15.10 /bin/bash

​			apt-get update

​			exit

​			docker commit  -m="ha update" -a="runoob" id runoob/ubuntu:v2

​			-m	指定提交信息

​			-a	指定镜像作者

​			id	容器id

​			runoob/ubuntu:v2	指定创建的目标镜像名

​	2，构建

​		docker build

​		创建Dockerfile

```
FROM    centos:6.7
MAINTAINER      Fisher "fisher@sudops.com"

RUN     /bin/echo 'root:123456' |chpasswd
RUN     useradd runoob
RUN     /bin/echo 'runoob:123456' |chpasswd
RUN     /bin/echo -e "LANG=\"en_US.UTF-8\"" >/etc/default/local
EXPOSE  22
EXPOSE  80
CMD     /usr/sbin/sshd -D
```

​		docker build -t runoob/centos:6.7 .（当前文件夹）

​		设置镜像标签

​			docker tag 860c279d2fec runoob/centos:dev（tag 是dev）



### Docker容器连接





### Docker 安装Nginx

​	1,pull

​	2,自己构建





## Docker搭建Java开发环境

```
docker run -it centos:latest /bin/bash
#安装wget库
sudo yum install wget
#获取JDK1.8包
wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie"
https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz
#安装vim
yum -y install vim-enhanced
```



Dockerfile
	FROM	基础镜像
	MAINTAINER 镜像维护者姓名邮箱
	RUN 容器构建需要运行的命令
	EXPOSE 暴露端口
	WORKDIR 终端默认工作目录
	ENV	设置环境变量
	ADD  拷贝+解压缩
	COPY  拷贝
	VOLUME 容器数据卷
	CMD  shell  exc 最后一个生效  docker run 参数替换
	ENITRYPOINT		执行命令都执行
	ONBUILD  父镜像被子镜像继承执行
	
	Base镜像（scratch）
	
	centos 
	
FROM centos
MAINTAINER yyj<609082367@qq.com>
ENV mypath /path
WORKDIR $mypath
RUN yum -y install vim
RUN yum -y install net-tools
EXPOSE 80
CMD /bin/bash

docker build -f dockerfile -t mycentos:1.3 .(当前目录)
docker run -it mycentos:1.3
docker history uuid

	tomcat9
touch c.txt
拷贝tomcat jdk
from centos
maintainer yyj<609082367@qq.com>
copy c.txt /usr/local/cincontainer.txt
add jdk.tar.gz /usr/local
add tomcat.tar.gz /usr/local

run yum -y install vim

env mypath /usr/local
workdir $mypath
env JAVA_HOME /usr/local/jdk1.8
env CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
env CATALINA_HOME /usr/local/tomcat9
env CATALINA_BASE /usr/local/tomcat9
env PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin

expose 8080
#entrypoint ["/usr/local/tomcat9/bin/startup.sh"]
#cmd ["/usr/local/tomcat9/bin/catalina.sh", "run"]
cmd /usr/local/tomcat9/bin/startup.sh && tail -F /usr/local/tomcat9/logs/catalina.out

docker build -t mytomcat . 统一目录，省略-f dockerfile文件名
docker run -it  -p 9080:8080 
-v /tomcat9/test:/usr/local/tomcat9/test
-v /tomcat9/logs:/usr/local/tomcat8/logs
--privieged=true
mytomcat

docker exec uiid ls -l



docker常用软件安装
	docker search mysql
	docker pull mysql:5.6
	
docker run -p 123456:3306 --name mysql
-v /mysql/conf:/etc/mysql/conf.d
-v /mysql/logs:/logs
-v /mysql/data:/var/lib/mysql
-e MYSQL_ROOT_PASSWORD=123456
-d mysql:5.6
	
docker exec -it uuid  /bin/bash
mysql -uroot -p123456
备份
docker exec uuid sh -C ' exec mysqldump --all-databases -uroot -p"123456"' > /zzyyuser/all-databases.sql


docker pull redis:3.2
docker run -p 6379:6379
-v /myredis/data:/data
-v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf  新建reids.conf
-d redis:3.2 redis-server /usr/local/etc/redis/redis.conf
--appendonly  aof持久化

docker exec -it uuid redis-cli

推送阿里云
docker commit -a zzyy -m 'new mycentos1.4 whit vim and ifconfig' uuid mycentos:1.4
	
docker 


FROM java
VOLUME /tmp
ADD dockerdemo-0.0.1.jar app.jar
RUN sh -c 'touch /app.jar'
ENV JAVA_OPTS=""
ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar" ]

mvn package docker:build


docker run  --name luminuojenkins -p 8080:8080 -p 50000:50000 -u root -d -v /root/docker/jenkins:/var/jenkins_home jenkins/jenkins:lts

制作javaweb  war jar 镜像
docker pull centos:7.6.1810

docker run -i -t -v /root/software/:/mnt/software/ f1cb7c7d58b7 /bin/bash

tar -zxvf apache-tomcat-8.5.39.tar.gz /java

yum -y install vim*
设置环境变量
tomcat 运行脚本
vim /root/run.sh
	#!/bin/bash
	source 	~/.bashrc
	sh /root/tomcat8/bin/catalina.sh run
chmod u+x /root/run.sh
exit

docker commit 7d67ad702a71 luminuo/javaweb:0.1
docker run -d -p 8081:8080 --name javawebtest luminuo/javaweb:0.1 /root/run.sh
docker exec -it d543bcc774b27a06a68506c4725dc318e6db409ecaeed297b4b5951ea7b4a25c /bin/bash
tomcat启动可能很慢


da5908d75fa740b3895114cd09a6b7e9